/*  By Obrey Muchena 
 *  10.03.2024
 *  Snake Game with OLED Display
 *  Version: v1.0.0
 */ 

// Define project constants
#define PROJECT_NAME "Snake"
#define VERSION "v1.0.0"

// Include necessary libraries
#include "includes.h"

// Constants for buttons and hardware components
#define KEY_LEFT 2
#define KEY_DOWN 3
#define KEY_UP 4
#define KEY_RIGHT 5 
#define KEY_CENTER 6
#define POTENTIOMETER A0
#define BUZZER 7
#define LED 8

// Game board modifiers
#define DISPLAY_HEIGHT 64
#define DISPLAY_WIDTH 128
#define CANVAS_HEIGHT 9
#define CANVAS_WIDTH 18
#define SEGMENT_SIZE 3
#define MARGIN_TOP 11 // Maximum 11
#define MARGIN_LEFT 21 // Maximum 21

// Declarations for hardware components
hd44780_I2Cexp lcd(0x20, I2Cexp_MCP23008, 7, 6, 5, 4, 3, 2, 1, HIGH);
Adafruit_SSD1306 display(DISPLAY_WIDTH, DISPLAY_HEIGHT, &Wire, 4);

// Snake and game state variables
uint8_t headX = 4;
uint8_t headY = 4;
uint8_t tailX[31] = {};
uint8_t tailY[31] = {};
uint8_t foodX = 1;
uint8_t foodY = 1;
uint8_t snakeSize = 0;
unsigned long lastTime;
enum {
  left,
  right,
  up,
  down,
} direction, lastDirection;

// Setup function
void setup(){
  lcd.begin(16, 2);
  intro(lcd);

  // Set up pin modes
  pinMode(KEY_LEFT, INPUT);
  pinMode(KEY_DOWN, INPUT);
  pinMode(KEY_UP, INPUT);
  pinMode(KEY_RIGHT, INPUT);
  pinMode(KEY_CENTER, INPUT);
  pinMode(BUZZER, OUTPUT);
  pinMode(LED, OUTPUT);
  
  // Initialize display
  display.begin(0x2, 0x3C, false);
  display.setTextColor(1);
  display.setTextSize(2);
  display.clearDisplay();
  drawCanvas();
  createFood();
  display.display();

  lastTime = millis();
}

// Main game loop
void loop(){
  // Check button inputs and update direction
  if(digitalRead(KEY_LEFT) && lastDirection != right){
    direction = left;
  }
  if(digitalRead(KEY_RIGHT) && lastDirection != left){
    direction = right;
  }
  if(digitalRead(KEY_UP) && lastDirection != down){
    direction = up;
  }
  if(digitalRead(KEY_DOWN) && lastDirection != up){
    direction = down;
  }

  // Adjust game speed based on potentiometer input
  int pot = analogRead(POTENTIOMETER);
  int speedUp = 0;
  if(pot > 950){
    speedUp += (snakeSize < 7) ? (snakeSize * 100) : (snakeSize * 25 + 600);
  }
  if(lastTime + pot - speedUp < millis()){
    lastDirection = direction;
    
    // Update snake position based on direction
    updateSnakePosition();

    drawSnake();
    lastTime = millis();
  }
}

// Function to update snake position
void updateSnakePosition(){
  if(direction == left){
    headX = (headX == 0) ? CANVAS_WIDTH : headX - 1;
  }
  if(direction == right){      
    headX = (headX == CANVAS_WIDTH) ? 0 : headX + 1;
  }
  if(direction == up){
    headY = (headY == 0) ? CANVAS_HEIGHT : headY - 1;
  }
  if(direction == down){
    headY = (headY == CANVAS_HEIGHT) ? 0 : headY + 1;
  }
}

// Function to draw snake on the display
void drawSnake(){
  drawSegment(tailX[snakeSize], tailY[snakeSize], 0);
  
  for(int i = snakeSize; i > 0; i--){
    // Check for collision with snake body or winning condition
    if((tailX[i] == headX && tailY[i] == headY && i != snakeSize) || snakeSize == 30){
      handleGameEnd();
    }

    // Update tail position
    tailX[i] = tailX[i - 1];
    tailY[i] = tailY[i - 1];
  }

  // Update head position
  tailX[0] = headX;
  tailY[0] = headY;

  // Check for food consumption
  if(headX == foodX && headY == foodY){
    createFood();
    snakeSize++;
  }

  // Update and display score
  clearScore();
  display.setCursor(0, 0);
  display.println(snakeSize);
  
  drawSegment(headX, headY, 1);
  display.display();
}

// Function to handle game end scenarios
void handleGameEnd(){
  String endingText = (snakeSize == 30) ? "YOU WIN" : "GAME OVER";
  snakeSize = 0;
  display.clearDisplay();      
  display.setCursor(10, 30);      
  display.println(endingText);
  display.display();
  play(0, 120);
  play(1175, 120);
  play(1047, 480);
  delay(4000);
  display.clearDisplay();
  drawCanvas();
  createFood();
}

// Function to create food on the canvas
void createFood(){
  boolean drawAgain = true;

  drawFood(foodX, foodY, 0);
  drawCanvas();
  beep();
  while(drawAgain){
    drawAgain = false;
    foodX = random(0, CANVAS_WIDTH);
    foodY = random(0, CANVAS_HEIGHT);
    
    // Check for collision with snake body
    for(int i = 0; i < snakeSize; i++){
      if(tailX[i] == foodX && tailY[i] == foodY){
        drawAgain = true;
      }
    }
  }

  drawFood(foodX, foodY, 1);
}

// Function to draw food on the display
void drawFood(uint8_t x, uint8_t y, uint8_t color){
  display.drawRoundRect(MARGIN_LEFT + 0 + x * SEGMENT_SIZE * 2, 
                     MARGIN_TOP + 0 + y * SEGMENT_SIZE * 2, 
                     5, 
                     5, 
                     0, 
                     color); 
}

// Function to draw a snake segment on the display
void drawSegment(uint8_t x, uint8_t y, uint8_t color){
  display.fillRoundRect(MARGIN_LEFT + 1 + x * SEGMENT_SIZE * 2, 
                     MARGIN_TOP + 1 + y * SEGMENT_SIZE * 2, 
                     3, 
                     3, 
                     0, 
                     color); 
}

// Function to draw the game canvas on the display
void drawCanvas(){
  display
